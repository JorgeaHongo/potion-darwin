
			README for POTION
		      (last updated 12/03/2014)

Authors
-=-=-=-
Jorge Augusto Hongo (jorgeahongo@gmail.com, jorge.hongo@colaborador.embrapa.br)
Francisco Pereira Lobo (franciscolobo@gmail.com, francisco.lobo@embrapa.br)

POTION is a program to find evidence of positive selection in genomic-scale 
data in a massivelly parallel pipeline. The current design is for ease of 
development and debug, creating temporary files to keep track of any data 
generated by each program used (MUSCLE or Prank, PHYLIP, PAML) and the 
coherence of the input and output data.


How to use - in brief
-=-=-=-=-=-=-=-=-=-=-

There are four steps to use this program after downloading:

1- Obtain fasta files containing the nucleotide coding DNA sequence (CDS) for
all genes of each specie, one specie per fasta, and OrthoMCL 1.4 format file
describing the homology relationships of genes under analysis.

2- Set the parameters in 'potion_config' file, inside 'config_files' directory.

3- Set the parameters in your project's configuration file. To create an empty
configuration file execute POTION with the parameter '--create_conf'.

4 - Execute POTION with a single argument - the path to the configuration file.


How to use - in detail
-=-=-=-=-=-=-=-=-=-=-=

Install
-=-=-=-

Install POTION following the instructions contained in 'INSTALL' file. Check
if everything went all right by executing POTION using one of the two datasets
distributed with it (TRYP or MYC)

Input
-=-=-

After installing POTION users can start anayzing their own data. Users are
required to provide a multi-fasta CDS file for each specie to be analyzed and
a file describing the homology relationships among CDS. This file's format
follows OrthoMCL 1.4 output, which contains one ortholog group per line in the
as follows:

ORTHO468(2 genes,2 taxa):       gene_name_1(genome_1.fa) gene_name_2(genome_2.fa)

The ending colon and the count of genes/taxa are optional. A tab charactere 
("\t") must separate the name of the group from its genes and their file of
origin (in parenthesis).


POTION takes as single parameter a configuration file that defines the overall
behavior of our program. 
and performance. This file is expected to be specific for each project.



POTION also uses fasta files with the coding nucleotide sequences of each organism, one organism per file.
The configuration file specify the directory containing them as the parameter 'path_of_nt_files'.

You can use some scripts to extract data from genbank files in the 'scripts/utils' directory.
'divide_organisms.pl' splits multi-organism genbank files into genbank files with one organism each.
'gb_2_aa_nt_fasta.pl' writes a fasta file with the CDS and protein sequences from a genbank file.


Two mandatory parameters are the path to the directory containing the nucleotide
CDS files (one per genome) and the path to the file describing the homology 
relationships within genes present in CDS file (OrthoMCL 1.4 output format).


Last, POTION uses a file that describes the homology relationships of the genes from each homologous group.
The format follows OrthoMCL 1.4 output, which contains one ortholog group per line in the format below:

ORTHO468(2 genes,2 taxa):	 Alcelaphine_1_3(Alcelaphine_1.fa) Ovine_2_3(Ovine_2.fa)


                                 
The ending colon and the count of genes/taxa are optional. A tab charactere ("\t") must separate the name of
the group from its genes and their file of origin (in parenthesis).


Output
-=-=-=-
This program returns as output the following files, whose names can be configured in potion_config file:

  - result_table: file containing the statistical data and classification of each ortholog group
  - result_positive: file containing genes under positive selection with q-value < 0.05, with their 
                     ortholog group, gene sequence and indication of aminoacids with high probability
                     of w>1 ('+' for P > 0.95, '*' for P > 0.99)
  - result_positive.interleaved: same as result_positive, interleaved format
  - result_positive_m2: fasta with genes under positive selection in M1a-M2a comparison, intended for a
                        following BLAST analysis
  - result_positive_m8: fasta with genes under positive selection in M7-M8 comparison, same as above
  - result_positive_m28: fasta file with genes under positive selection in both model 2 and 8
  - result_uncertain: genes that satisfy the p-value criteria, but not the q-value one
  - result_uncertain.interleaved: same as result_uncertain, interleaved format
  - result_recombinants: shows a list of groups that show evidence of recombination

There are also some files for a following enrichment analysis, identified by 'for_enrichment'.


Dependencies
-=-=-=-=-=-=-
You need to install the additional third-party software to use POTION:

- MUSCLE    http://www.drive5.com/muscle/downloads.htm
- PhiPack - Phi executable (www.maths.otago.ac.nz/~dbryant/software/PhiPack.tar)
- Prank     http://www.ebi.ac.uk/goldman-srv/prank/prank/ 
            check in particular http://code.google.com/p/prank-msa/downloads/list
- phylip  - seqboot, dnaml/proml and consense executables 
            (http://evolution.genetics.washington.edu/phylip.html)
- PAML    - codeml executable (http://abacus.gene.ucl.ac.uk/software/paml.html)
- TrimAl    http://trimal.cgenomics.org/downloads

Make sure to use the most recent version of each of these packages. Note that you can choose between MUSCLE
and Prank for multiple alignment, and between DNAml and Proml for the phylogenetic tree, so having only one
of them is enough for the respective task.

You also need to have Perl and BioPerl installed in your machine. In particular, the following perl modules:

- Bio::SeqIO
- File::chdir
- File::Copy
- Statistics::Distributions
- Statistics::Multtest
- Try::Tiny

You can check if you have them installed in your machine with 'perl -M<module> -e 1'. It will return an error
message if it isn't installed.
Ex: "perl -MBio::SeqIO -e 1"

To install these modules, you can do through the CPAN or manually downloading (http://search.cpan.org/) and
compiling them. To use CPAN, you can do by writing:
> perl -MCPAN -e 'install <module>'

To install manually, search for the most recent version of these modules and, for each, download 
and type the following:
> tar -zxvf <module.tar.gz>
> perl Makefile.PL
> make
> make test
> make install



Can and cannot do
-=-=-=-=-=-=-=-=-
This program is able to inform which genes are under strong influence by the environment of the 
specie and, thus, are of interest of research. It can do it from a set of genes of the specie 
and its homologous.

This program can't define the function of the genes it finds, nor determine the exact reason of it. You
must follow with an enrichment analysis for it.



Intermediate files
-=-=-=-=-=-=-=-=-=-
The program follows a pipeline that produces intermediate files for debug and correctness verification
and place them in the intermediate_files directory. These files are also available for use by a future
database application, if such interest arise.

The files receive suffixes that traces the conversions and processes; FOO_1.cluster.aa.fa.aln indicates
that it is an analysis for group FOO_1, had the cluster parsed, contains aminoacid sequence (aa) in
fasta format (fa) and has been aligned (aln).

The current pipeline has the following order:
- (cluster) parse clusters
- (aa) translate nucleotide sequences to aminoacid ones
- (aln) align protein sequences
- (aa/nt) align codons in nucleotide sequences
- (no suffix) identify traces of recombination
- (trim) trim sequences
- (boot/tree/final_tree) build phylogenetic trees
- (model) calculate DN/DS and model likelihood

Other intermediate files of interest:
- id_names: info about the temporary ids in the group and which ones come from a reference genome
- time_***: how much time was spent on a given step
- Phi: results of the analysis for recombination sites on that group, see PhiPack documentation for
       additional info



Development notes
-=-=-=-=-=-=-=-=-=-
Some notes about the third-party programs:
- Prank currently uses the parameters -twice, -F and -quiet; the second file produced as output is used 
  as the alignment
- Some programs can crash during execution even if they would run normally if done manually. Programs
  that have any bug regarding memory leaks have a higher likelihood to run into it when used in a 
  highly-parallelized pipeline; POTION will attempt to isolate the problem and re-run the program
  at least 3 times (can be set by the user) before excluding the group from the analysis.


Known Issues
-=-=-=-=-=-=-
- Prank may abort a few times for a large number of processes due to memory issues; Potion will attempt 
  to reinitialize it until it runs properly. If rerunning doesn't solve it, we recommend running with
  less processes, reducing the parameter 'max_processes' until the problem stops occuring.

- If you want to halt prank during a run, use 'killall perl' followed by 'killall prank'. However, it
  doesn't prevent possible errors due to memory overwrite.

- "version `GLIBC_x.xx' not found" is a possible message when running PAML, Phylip executables and other
  programs written in C. This indicates that you compiled them with a newer C library than the one in the
  computer you are using. Update your C library (GLIBC) from http://www.gnu.org/software/libc/index.html
  or recompile the executable with your current library.


Parameters
-=-=-=-=-=-
The description of what each parameter does and their valid input can be seen in the configuration file.
In both configuration files (POTION's and project's), you can use the value in parameter 'potion_dir'
in other parameters by writing '$potion_dir'. As an example, if you have:

potion_dir = /home/myname/POTION/

and want to store your results in a directory named "analysis_yyyymmdd", then both of the following works:

project_dir = /home/myname/POTION/projects/analysis_yyyymmdd
project_dir = $potion_dir/projects/analysis_yyyymmdd

Below is the description you will find in each file:



POTION's configuration file:
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
- potion_dir: path to this program, you can reference it in the parameters below by writing "$potion_dir" when applicable (path to directories or files).

- codeml: path to the Codeml executable of PAML package
- consense: path to the Consense executable of Phylip package
- dnaml: path to the Dnaml executable
- muscle: path to the MUSCLE executable
- phipack: path to the Phi executable of PhiPack
- prank: path to the Prank executable
- proml: path to the Proml executable of Phylip package
- seqboot: path to the Seqboot executable of Phylip package
- trimal: path to the Trimal executable

- result_table: file with the final result in tsv format (tab spaced values).
- result_uncertain: file with the list of clusters where the null hypotesis can't be ignored by the positive evidence. Leave empty if you do not desire to produce this list
- result_positive: file with the list of clusters with evidence of positive selection.
- result_recombinants: file with the list of clusters that show signal of recombinance
- summary: info about POTION's run

- tries: number of tries for each program, in case it crashes or returns an error



Project's configuration file:
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
- path_of_nt_files: Path to the directory with the fasta files containing the nucleotide sequence of genes of each specie
- cluster_file: Path to the file with ortholog groups
- project_dir: Path to the directory where the result files will be created

- reference_genome_files: Genome set to be used as the reference to determine the selective pressure acting upon them
                           any ortholog group without any gene from one or more of these won't be added to the results
                           uses the name after the gene in the file containing the information of the ortholog groups
                           ex: Bovine_herpesvirus_1_39(Bovine_herpesvirus_1.gb_proteins)  -->  reference_genome_files = Bovine_herpesvirus_1.gb_proteins
                           use (w) or (weak) before the file's name to allow groups with invalid sequences to be analyzed
                           use (s) or (strong) to allow only valid sequences for analysis,
                            groups with an invalid sequence won't be added to the final results without another valid sequence coming from a reference genome.

- groups_to_process: Defines which lines of the cluster file (ortholog groups) will be processed.
                      use "all" to process every group, "-" to set groups between two given lines (including the said lines)
                      use "!" to not process a specific line, can be used with "-" to specify a set to not be processed.
                      use "," or ";" to set distinct sets
                       examples: 1;4-10;12  will process groups 1, 4 to 10 and group 12
                                 all;!3     will process all groups, except group 3
                                 all;!3-5   will process all groups, except groups 3 to 5

- codon_table: Indicates the codon table id according to NCBI and bioperl standard. See http://www.ncbi.nlm.nih.gov/Taxonomy/Utils/wprintgc.cgi for information
- additional_start_codons: Add optional start codons here. These will be considered together with the start codons specified in the codon table defined above
- additional_stop_codons: Same as above for stop codons.

- recombination_qvalue: Qvalue used to identify recombination, must be between 0 and 1. 0 = do not look for recombination
- rec_minimum_confirmations: Sets how many of the three recombination tests must result in a confirmation to exclude a group from the analysis
- rec_mandatory_tests: Sets which tests must confirm recombination in order to exclude a group
                        no confirmation from these means the group will pass regardless of how many others confirmed recombination
                        helpful to deal with datasets that are prone to false positives for certain tests
                        supported tests (case insensitive): phi maxchi2 nss

- behavior_about_paralogs: For cases when one specie has more than one ortholog gene with the other species in a orthology set (cluster),
                            change this variable to define whether this paralogies are problematic for your study and how to proceed:
                                     0 means paralogy won't affect your study and will be accepted (no validation regarding this aspect will be done)
                                     1 means paralogy is undesirable, species with paralogous genes are removed to leave only single-copy genes in the cluster for analysis
                                     2 means paralogy invalidates the orthology found, only clusters with only single-copy genes will be accepted by this program
                                     3 means only paralogies are of interest and should be analyzed inside the group
                                     4 means only paralogies within the same specie are of interest and should be analyzed individually

- minimum_gene_number_per_cluster: Minimum value of 3 due to the need to produce phylogenetic trees.
- maximum_gene_number_per_cluster: Maximum value for phylogenic trees, leave "undef" to set no maximum value.
- minimum_specie_number_per_cluster: Similar as gene per cluster
- maximum_specie_number_per_cluster: Maximum value for phylogenic trees, leave "undef" to set no maximum value.

- remove_gaps: Defines whether gaps are trimmed before building phylogenetic trees. 0 to remove only columns filled with gaps, 1 to generate files with no gaps
                between 0 and 1 to set minimum percentage of aminoacid or nucleotides aligned in each column.

- verbose: Defines whether the program will keep the user informed about the program's operations
            0 for only info of completion in output, 1 for progress of the steps
            to receive no info at all, use "1>/dev/null" in the command line

- PAML_models: PAML models to compare, can use more than one (ex: models = m12 m78). Current options are: m12 (M1a with M2a), m78 (M7 with M8)
- max_processes: Maximum number of processes running, to limit mem and cpu usage; not recommended to leave unlimited
- bootstrap: Number of trees generated by phylip program seqboot, minimum of 100 recommended. Has a tradeoff between performance and precision of data

- pvalue: Pvalue used in the results to define groups with positive selection
- qvalue: Qvalue used in the results to define groups with positive selection

- phylogenetic_tree_speed: Option for Proml and Dnaml, 'fast' is the standard mode for both, 'slow' is the most likely to find the topology of highest likelihood

- behavior_about_bad_clusters: This variable defines the verification of the cluster's data quality regarding nucleotide sequences
                                0 means no validation of sequences (not recommended, may lead to inaccurate results)
                                1 means only removal of problematic sequences, the remaining sequences in the cluster will be analyzed
                                2 means the program won't evaluate any cluster with invalid sequences

- validation_criteria: This variable sets which criterias will be adopted to validate the nucleotide sequences, set all options you desire
                        '1' checks if the start codon is valid for the codon table chosen and within the additional start codons
                        '2' checks does the same for stop codons
                        '3' checks if the sequence size is multiple of 3
                        '4' checks if there are both 'T' and 'U' nucleotides
                        '5' checks if there are any nucleotides outside ATCG or AUCG
                        'all' applies every verification

- fix_excess_nt: This variable sets POTION to remove any nucleotide at the end of the sequence that exceeds a size multiple of three. 0 = no change, 1 = remove
                  only applicable if the behavior_about_bad_clusters isn't '0' and validation_criteria covers the '3' option.

- absolute_min_sequence_size: Accepted minimum number of nucleotides in any sequence; added to control some cases of noise-prone sequences
- relative_sequence_size: Accepted relative size of nucleotides of each sequence in a group, every sequence must be equal or larger than the proportion
                           when compared to the biggest sequence.
                           Value between 0 and 1, or (0,1]

- multiple_alignment: Program to use for multiple alignment. Current options: Muscle, Prank. Muscle is currently the default option, in case this parameter is left empty
- phylogenetic_tree: Program to use for construction of the phylogenetic tree. Current options: Proml, Dnaml
